{"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV5bytesSays5UInt8VGvp":{"name":"bytes","abstract":"<p>The raw bytes of the public key</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV12signingCurveAA010EllipticalG0Ovp":{"name":"signingCurve","abstract":"<p>The signing curve used by the public key, to generate a wallet address</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV25base58CheckRepresentationSSvp":{"name":"base58CheckRepresentation","abstract":"<p>Return a Base58 encoded version of the publicKey</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV06publicE4HashSSSgvp":{"name":"publicKeyHash","abstract":"<p>Return a hash of the publicKey with the appropriate address prefix</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV_12signingCurveACSays5UInt8VG_AA010EllipticalG0Otcfc":{"name":"init(_:signingCurve:)","abstract":"<p>Initialize a key with the given bytes and signing curve.</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV6verify7message9signatureSbSays5UInt8VG_AItF":{"name":"verify(message:signature:)","abstract":"<p>Verify that the given signature matches the given input bytes.</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:16KukaiCryptoSwift9PublicKeyV06publicE4Hash017fromBase58EncodedE0SSSgSS_tFZ":{"name":"publicKeyHash(fromBase58EncodedKey:)","abstract":"<p>Take a base58Encoded public key (with a prefix) and convert it to a tzX public key hash</p>","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"PublicKey"},"Structs/PublicKey.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"PublicKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV5bytesSays5UInt8VGvp":{"name":"bytes","abstract":"<p>The raw bytes of the private key</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV12signingCurveAA010EllipticalG0Ovp":{"name":"signingCurve","abstract":"<p>The signing curve used by the public key, to generate a wallet address</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV25base58CheckRepresentationSSvp":{"name":"base58CheckRepresentation","abstract":"<p>Return a Base58 encoded version of the privateKey</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV_12signingCurveACSays5UInt8VG_AA010EllipticalG0Otcfc":{"name":"init(_:signingCurve:)","abstract":"<p>Initialize a key with the given bytes.</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV_12signingCurveACSgSS_AA010EllipticalG0Otcfc":{"name":"init(_:signingCurve:)","abstract":"<p>Initialize a key with the given base58check encoded string.</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV4sign3hexSays5UInt8VGSgSS_tF":{"name":"sign(hex:)","abstract":"<p>Sign the given hex encoded string with the given key.</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:16KukaiCryptoSwift10PrivateKeyV4sign5bytesSays5UInt8VGSgAH_tF":{"name":"sign(bytes:)","abstract":"<p>Sign the given bytes.</p>","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"PrivateKey"},"Structs/PrivateKey.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"PrivateKey"},"Structs/Mnemonic/NumberOfWords.html#/s:16KukaiCryptoSwift8MnemonicV13NumberOfWordsO6twelveyA2EmF":{"name":"twelve","parent_name":"NumberOfWords"},"Structs/Mnemonic/NumberOfWords.html#/s:16KukaiCryptoSwift8MnemonicV13NumberOfWordsO7fifteenyA2EmF":{"name":"fifteen","parent_name":"NumberOfWords"},"Structs/Mnemonic/NumberOfWords.html#/s:16KukaiCryptoSwift8MnemonicV13NumberOfWordsO8eighteenyA2EmF":{"name":"eighteen","parent_name":"NumberOfWords"},"Structs/Mnemonic/NumberOfWords.html#/s:16KukaiCryptoSwift8MnemonicV13NumberOfWordsO9twentyOneyA2EmF":{"name":"twentyOne","parent_name":"NumberOfWords"},"Structs/Mnemonic/NumberOfWords.html#/s:16KukaiCryptoSwift8MnemonicV13NumberOfWordsO10twentyFouryA2EmF":{"name":"twentyFour","parent_name":"NumberOfWords"},"Structs/Mnemonic/NumberOfWords.html":{"name":"NumberOfWords","abstract":"<p>Helper enum used to choose the number of words for a mnemonic</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV6phraseSSvp":{"name":"phrase","abstract":"<p>The list of words as a single sentence.</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV5wordsSaySSGvp":{"name":"words","abstract":"<p>The list of words.</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV10seedPhraseACSSSg_tKcfc":{"name":"init(seedPhrase:)","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV8strength2inACSi_AA8WordListOtKcfc":{"name":"init(strength:in:)","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV13numberOfWords2inA2C06NumberfG0O_AA8WordListOtKcfc":{"name":"init(numberOfWords:in:)","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV7entropy2inACx_AA8WordListOtKcAA16EntropyGeneratorRzlufc":{"name":"init(entropy:in:)","abstract":"<p>Create a mnemonic from a pre-computed <code>entropy</code>, with phrase_ pulled from","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV4seed10passphrase10Foundation4DataVSS_tKF":{"name":"seed(passphrase:)","abstract":"<p>Create the mnemonic&rsquo;s private key (seed).</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV5scrubyyF":{"name":"scrub()","abstract":"<p>Scrub the phrase from memory by replacing with 0&rsquo;s</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV18deriveChecksumBitsySSSays5UInt8VGFZ":{"name":"deriveChecksumBits(_:)","abstract":"<p>Derive the checksum portion of an array of bits</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV15isValidChecksum6phrase8wordlistSbSaySSG_AA8WordListOtFZ":{"name":"isValidChecksum(phrase:wordlist:)","abstract":"<p>Verify the chechsum of the supplied words to esnure its a valid phrase</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV12isValidWords2inSbAA8WordListO_tF":{"name":"isValidWords(in:)","abstract":"<p>Check a mnemonic contains valid words and a valid length (all other checks are ignored)</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV7isValid2inSbAA8WordListO_tF":{"name":"isValid(in:)","abstract":"<p>Check a mnemonic is of the correct length, is made up of valid BIP39 words, and the checksum matches</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV9toEntropy14ignoreChecksum8wordlistSays5UInt8VGSb_AA8WordListOtKF":{"name":"toEntropy(ignoreChecksum:wordlist:)","abstract":"<p>Modifed from: <a href=\"https://github.com/pengpengliu/BIP39/blob/master/Sources/BIP39/Mnemonic.swift\">https://github.com/pengpengliu/BIP39/blob/master/Sources/BIP39/Mnemonic.swift</a>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV07shiftedD018fromSpskPrivateKeyACSgAA0hI0V_tFZ":{"name":"shiftedMnemonic(fromSpskPrivateKey:)","abstract":"<p>Take a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PrivateKey.html\">PrivateKey</a></code> from a TorusWallet and generate a custom &ldquo;shifted checksum&rdquo; mnemonic, so that we can recover wallets that previously had no seed words</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV13shiftChecksum8mnemonic8wordListA2C_AA04WordI0OtKFZ":{"name":"shiftChecksum(mnemonic:wordList:)","abstract":"<p>Shift the checksum of of a <code>Mnemonic</code> so that it won&rsquo;t be accepted by tradtional improts</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV14getShiftedWord4word0H4ListS2S_AA0gI0OtKFZ":{"name":"getShiftedWord(word:wordList:)","abstract":"<p>Return a shifted word to replace the last word in a mnemonic</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV14mnemonicToSpsk0E08wordListSSSgAC_AA04WordI0OtFZ":{"name":"mnemonicToSpsk(mnemonic:wordList:)","abstract":"<p>Convert a mnemonic to a Base58 encoded private key string. Helpful when determining if a shifted mnemonic is valid</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV07shiftedd2ToD08mnemonicACSgAC_tFZ":{"name":"shiftedMnemonicToMnemonic(mnemonic:)","abstract":"<p>Convert a shifted Mnemoinc back to normal</p>","parent_name":"Mnemonic"},"Structs/Mnemonic.html#/s:16KukaiCryptoSwift8MnemonicV9validSpskySbSSFZ":{"name":"validSpsk(_:)","abstract":"<p>Check if a supplied Spsk string is valid</p>","parent_name":"Mnemonic"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV07privateD0AA07PrivateD0Vvp":{"name":"privateKey","abstract":"<p>The underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PrivateKey.html\">PrivateKey</a></code> of the pair</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV06publicD0AA06PublicD0Vvp":{"name":"publicKey","abstract":"<p>The underlying <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PublicKey.html\">PublicKey</a></code> of the pair</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV7regular14fromSeedStringACSgSS_tFZ":{"name":"regular(fromSeedString:)","abstract":"<p>Create a regular (non HD) <code>KeyPair</code> from a hex seed string</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV7regular12fromMnemonic10passphraseACSgAA0H0V_SStFZ":{"name":"regular(fromMnemonic:passphrase:)","abstract":"<p>Create a regular (non HD) <code>KeyPair</code> from a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Mnemonic.html\">Mnemonic</a></code> instance</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV2hd14fromSeedString17andDerivationPathACSgSS_SStFZ":{"name":"hd(fromSeedString:andDerivationPath:)","abstract":"<p>Create a HD <code>KeyPair</code> from a hex seed string and optional Derivation Path (defaults to m/44&rsquo;/1729&rsquo;/0&rsquo;/0&rsquo; ). Only TZ1 are produceable</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV2hd12fromMnemonic10passphrase17andDerivationPathACSgAA0H0V_S2StFZ":{"name":"hd(fromMnemonic:passphrase:andDerivationPath:)","abstract":"<p>Create a HD <code>KeyPair</code> from a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Mnemonic.html\">Mnemonic</a></code> instance</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV015secp256k1PublicD0011fromPrivateD5BytesAA0gD0VSgSays5UInt8VG_tFZ":{"name":"secp256k1PublicKey(fromPrivateKeyBytes:)","abstract":"<p>Helper method to take a secp256k1 private key (for a regualr keypair) and use it to create a public key for the same curve</p>","parent_name":"KeyPair"},"Structs/KeyPair.html#/s:16KukaiCryptoSwift7KeyPairV015secp256k1PublicD13_uncompressed9fromBytesSays5UInt8VGAH_tFZ":{"name":"secp256k1PublicKey_uncompressed(fromBytes:)","abstract":"<p>Helper method to uncompress a secp256k1 public key</p>","parent_name":"KeyPair"},"Structs/HD/HDError.html#/s:16KukaiCryptoSwift2HDV7HDErrorO11invalidHmacyA2EmF":{"name":"invalidHmac","parent_name":"HDError"},"Structs/HD/HDError.html#/s:16KukaiCryptoSwift2HDV7HDErrorO21invalidDerivationPathyA2EmF":{"name":"invalidDerivationPath","parent_name":"HDError"},"Structs/HD/HDError.html#/s:16KukaiCryptoSwift2HDV7HDErrorO22derivationPathTooLargeyA2EmF":{"name":"derivationPathTooLarge","parent_name":"HDError"},"Structs/HD/HDError.html#/s:16KukaiCryptoSwift2HDV7HDErrorO15invalidSeedSizeyA2EmF":{"name":"invalidSeedSize","parent_name":"HDError"},"Structs/HD/HDError.html#/s:16KukaiCryptoSwift2HDV7HDErrorO21unableToCreateKeyPairyA2EmF":{"name":"unableToCreateKeyPair","parent_name":"HDError"},"Structs/HD/HDError.html#/s:16KukaiCryptoSwift2HDV7HDErrorO23unableToCreatePublicKeyyA2EmF":{"name":"unableToCreatePublicKey","parent_name":"HDError"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV21defaultDerivationPathSSvpZ":{"name":"defaultDerivationPath","abstract":"<p>Default Tezos derivation path</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV21defaultDerivationPath16withAccountIndexSSSi_tFZ":{"name":"defaultDerivationPath(withAccountIndex:)","abstract":"<p>Default Tezos derivation path with supplied index</p>","parent_name":"HD"},"Structs/HD/HDError.html":{"name":"HDError","abstract":"<p>Errors that can be thrown</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV4NodeV":{"name":"Node","abstract":"<p>A struct representing a Node in a HD chain</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV4hmac7message3key10Foundation4DataVAI_AItFZ":{"name":"hmac(message:key:)","abstract":"<p>Compute a HMAC using SHA512</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV10deriveNode7message3keyAC0F0V10Foundation4DataV_AKtKFZ":{"name":"deriveNode(message:key:)","abstract":"<p>Derive a nnode from a message and a key</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV14deriveRootNode4seedAC0G0V10Foundation4DataV_tKFZ":{"name":"deriveRootNode(seed:)","abstract":"<p>Derive the root (or master) node from cryptographic seed data</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV15deriveChildNode4node5indexAC0G0VAH_6BigInt0J4UIntVtKFZ":{"name":"deriveChildNode(node:index:)","abstract":"<p>Derive a child node from a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/HD.html#/s:16KukaiCryptoSwift2HDV4NodeV\">Node</a></code> and a given index</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV28convertDerivationPathToArrayySay6BigInt0J4UIntVGSSKFZ":{"name":"convertDerivationPathToArray(_:)","abstract":"<p>Convert a derivation path into an array of <code>BigUInt</code> so it can be interated</p>","parent_name":"HD"},"Structs/HD.html#/s:16KukaiCryptoSwift2HDV22validateDerivationPathySbSSFZ":{"name":"validateDerivationPath(_:)","abstract":"<p>Very basic validation of a derivation path</p>","parent_name":"HD"},"Structs/Base58Check.html#/s:16KukaiCryptoSwift11Base58CheckV6encodeySS10Foundation4DataVFZ":{"name":"encode(_:)","abstract":"<p>Encodes the data to Base58Check encoded string</p>","parent_name":"Base58Check"},"Structs/Base58Check.html#/s:16KukaiCryptoSwift11Base58CheckV6decodey10Foundation4DataVSgSSFZ":{"name":"decode(_:)","abstract":"<p>Decode the Base58 encoded String value to original payload</p>","parent_name":"Base58Check"},"Structs/Base58Check.html#/s:16KukaiCryptoSwift11Base58CheckV6encode7message6prefixSSSays5UInt8VG_AItFZ":{"name":"encode(message:prefix:)","abstract":"<p>Base58 encode an array of bytes and add the supplied prefix</p>","parent_name":"Base58Check"},"Structs/Base58Check.html#/s:16KukaiCryptoSwift11Base58CheckV6decode6string6prefixSays5UInt8VGSgSS_AItFZ":{"name":"decode(string:prefix:)","abstract":"<p>Base58 decode a message, removing the supplied prefix</p>","parent_name":"Base58Check"},"Structs/Base58Check.html#/s:16KukaiCryptoSwift11Base58CheckV6encode7message15ellipticalCurveSSSays5UInt8VG_AA010EllipticalI0OtFZ":{"name":"encode(message:ellipticalCurve:)","abstract":"<p>Base58 encode an array of bytes and add the appropriate prefix base on the ellipticalCurve</p>","parent_name":"Base58Check"},"Structs/Base58.html#/s:16KukaiCryptoSwift6Base58V6encodeySS10Foundation4DataVFZ":{"name":"encode(_:)","parent_name":"Base58"},"Structs/Base58.html#/s:16KukaiCryptoSwift6Base58V6decodey10Foundation4DataVSgSSFZ":{"name":"decode(_:)","parent_name":"Base58"},"Structs/Base58.html":{"name":"Base58"},"Structs/Base58Check.html":{"name":"Base58Check","abstract":"<p>A set of Base58Check coding methods.</p>"},"Structs/HD.html":{"name":"HD","abstract":"<p>A struct used to provide a number of functions needed to handle derivation paths and derive nodes for creating HD key pairs</p>"},"Structs/KeyPair.html":{"name":"KeyPair","abstract":"<p>A struct representing a both a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PrivateKey.html\">PrivateKey</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PublicKey.html\">PublicKey</a></code> with helper methods to create various kinds</p>"},"Structs/Mnemonic.html":{"name":"Mnemonic","abstract":"<p>A list of words which can generate a private key.</p>"},"Structs/PrivateKey.html":{"name":"PrivateKey","abstract":"<p>A struct representing a PrivateKey</p>"},"Structs/PublicKey.html":{"name":"PublicKey","abstract":"<p>A struct representing a PublicKey</p>"},"Protocols/EntropyGenerator.html#/s:16KukaiCryptoSwift16EntropyGeneratorP7entropys6ResultOy10Foundation4DataVs5Error_pGyF":{"name":"entropy()","parent_name":"EntropyGenerator"},"Protocols/EntropyGenerator.html#/s:16KukaiCryptoSwift16EntropyGeneratorPAASyRzrlE7entropys6ResultOy10Foundation4DataVs5Error_pGyF":{"name":"entropy()","parent_name":"EntropyGenerator"},"Protocols/EntropyGenerator.html":{"name":"EntropyGenerator","abstract":"<p>Adopters can generate entropy; a random set of bytes.</p>"},"Extensions/String.html#/s:Sl11SubSequenceQa":{"name":"SubSequence","parent_name":"String"},"Extensions/Int.html#/s:Si16KukaiCryptoSwiftE7entropys6ResultOy10Foundation4DataVs5Error_pGyF":{"name":"entropy()","parent_name":"Int"},"Extensions/Int.html#/s:Si16KukaiCryptoSwiftE7weakestSivpZ":{"name":"weakest","parent_name":"Int"},"Extensions/Int.html#/s:Si16KukaiCryptoSwiftE4weakSivpZ":{"name":"weak","parent_name":"Int"},"Extensions/Int.html#/s:Si16KukaiCryptoSwiftE6mediumSivpZ":{"name":"medium","parent_name":"Int"},"Extensions/Int.html#/s:Si16KukaiCryptoSwiftE6strongSivpZ":{"name":"strong","parent_name":"Int"},"Extensions/Int.html#/s:Si16KukaiCryptoSwiftE9strongestSivpZ":{"name":"strongest","parent_name":"Int"},"Extensions/Sodium.html#/s:6SodiumAAV16KukaiCryptoSwiftE6sharedABvpZ":{"name":"shared","parent_name":"Sodium"},"Extensions/DataProtocol.html#/s:10Foundation12DataProtocolP16KukaiCryptoSwiftE9hexStringSSvp":{"name":"hexString","abstract":"<p>Convert a Data object into a hex string</p>","parent_name":"DataProtocol"},"Extensions/Data.html#/s:10Foundation4DataV16KukaiCryptoSwiftE11randomBytesyACSiKFZ":{"name":"randomBytes(_:)","abstract":"<p>Generate secure random bytes from Data</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV16KukaiCryptoSwiftE9hexStringACSS_tKcfc":{"name":"init(hexString:)","abstract":"<p>Create a Data object from a hex string</p>","parent_name":"Data"},"Extensions/Data.html#/s:10Foundation4DataV16KukaiCryptoSwiftE7entropys6ResultOyACs5Error_pGyF":{"name":"entropy()","parent_name":"Data"},"Extensions/Array.html#/s:Sa16KukaiCryptoSwifts5UInt8VRszlE28addOperationWatermarkAndHashSayACGSgyF":{"name":"addOperationWatermarkAndHash()","abstract":"<p>Prepare bytes for signing by applying a watermark and hashing.</p>","parent_name":"Array"},"Extensions/Array.html":{"name":"Array"},"Extensions/Data.html":{"name":"Data"},"Extensions/DataProtocol.html":{"name":"DataProtocol"},"Extensions/Sodium.html":{"name":"Sodium","abstract":"<p>Extension to <code>Sodium</code>to add a static shared instance, to avoid having to load it into memory frequently</p>"},"Extensions/Int.html":{"name":"Int"},"Extensions/String.html":{"name":"String"},"Enums/Prefix/Address.html#/s:16KukaiCryptoSwift6PrefixO7AddressO3tz1Says5UInt8VGvpZ":{"name":"tz1","parent_name":"Address"},"Enums/Prefix/Address.html#/s:16KukaiCryptoSwift6PrefixO7AddressO3tz2Says5UInt8VGvpZ":{"name":"tz2","parent_name":"Address"},"Enums/Prefix/Address.html#/s:16KukaiCryptoSwift6PrefixO7AddressO3tz3Says5UInt8VGvpZ":{"name":"tz3","parent_name":"Address"},"Enums/Prefix/Keys/Secp256k1.html#/s:16KukaiCryptoSwift6PrefixO4KeysO9Secp256k1O6publicSays5UInt8VGvpZ":{"name":"public","parent_name":"Secp256k1"},"Enums/Prefix/Keys/Secp256k1.html#/s:16KukaiCryptoSwift6PrefixO4KeysO9Secp256k1O6secretSays5UInt8VGvpZ":{"name":"secret","parent_name":"Secp256k1"},"Enums/Prefix/Keys/Secp256k1.html#/s:16KukaiCryptoSwift6PrefixO4KeysO9Secp256k1O9signatureSays5UInt8VGvpZ":{"name":"signature","parent_name":"Secp256k1"},"Enums/Prefix/Keys/P256.html#/s:16KukaiCryptoSwift6PrefixO4KeysO4P256O6secretSays5UInt8VGvpZ":{"name":"secret","parent_name":"P256"},"Enums/Prefix/Keys/P256.html#/s:16KukaiCryptoSwift6PrefixO4KeysO4P256O6publicSays5UInt8VGvpZ":{"name":"public","parent_name":"P256"},"Enums/Prefix/Keys/P256.html#/s:16KukaiCryptoSwift6PrefixO4KeysO4P256O9signatureSays5UInt8VGvpZ":{"name":"signature","parent_name":"P256"},"Enums/Prefix/Keys/Ed25519.html#/s:16KukaiCryptoSwift6PrefixO4KeysO7Ed25519O6publicSays5UInt8VGvpZ":{"name":"public","parent_name":"Ed25519"},"Enums/Prefix/Keys/Ed25519.html#/s:16KukaiCryptoSwift6PrefixO4KeysO7Ed25519O6secretSays5UInt8VGvpZ":{"name":"secret","parent_name":"Ed25519"},"Enums/Prefix/Keys/Ed25519.html#/s:16KukaiCryptoSwift6PrefixO4KeysO7Ed25519O4seedSays5UInt8VGvpZ":{"name":"seed","parent_name":"Ed25519"},"Enums/Prefix/Keys/Ed25519.html#/s:16KukaiCryptoSwift6PrefixO4KeysO7Ed25519O9signatureSays5UInt8VGvpZ":{"name":"signature","parent_name":"Ed25519"},"Enums/Prefix/Keys/Ed25519.html":{"name":"Ed25519","parent_name":"Keys"},"Enums/Prefix/Keys/P256.html":{"name":"P256","parent_name":"Keys"},"Enums/Prefix/Keys/Secp256k1.html":{"name":"Secp256k1","parent_name":"Keys"},"Enums/Prefix/Watermark.html#/s:16KukaiCryptoSwift6PrefixO9WatermarkO9operationSays5UInt8VGvpZ":{"name":"operation","parent_name":"Watermark"},"Enums/Prefix/Watermark.html":{"name":"Watermark","parent_name":"Prefix"},"Enums/Prefix/Keys.html":{"name":"Keys","parent_name":"Prefix"},"Enums/Prefix/Address.html":{"name":"Address","parent_name":"Prefix"},"Enums/WordList.html#/s:16KukaiCryptoSwift8WordListO7chineseyA2CmF":{"name":"chinese","parent_name":"WordList"},"Enums/WordList.html#/s:16KukaiCryptoSwift8WordListO7englishyA2CmF":{"name":"english","parent_name":"WordList"},"Enums/WordList.html#/s:16KukaiCryptoSwift8WordListO11randomWords11withEntropySaySSGx_tKAA0I9GeneratorRzlF":{"name":"randomWords(withEntropy:)","abstract":"<div class=\"aside aside-note\">","parent_name":"WordList"},"Enums/MnemonicError.html#/s:16KukaiCryptoSwift13MnemonicErrorO20seedDerivationFailedyA2CmF":{"name":"seedDerivationFailed","parent_name":"MnemonicError"},"Enums/MnemonicError.html#/s:16KukaiCryptoSwift13MnemonicErrorO17seedPhraseInvalidyACSScACmF":{"name":"seedPhraseInvalid(_:)","parent_name":"MnemonicError"},"Enums/MnemonicError.html#/s:16KukaiCryptoSwift13MnemonicErrorO5erroryACs0E0_pcACmF":{"name":"error(_:)","parent_name":"MnemonicError"},"Enums/MnemonicError.html#/s:16KukaiCryptoSwift13MnemonicErrorO16invalidWordCountyA2CmF":{"name":"invalidWordCount","parent_name":"MnemonicError"},"Enums/MnemonicError.html#/s:16KukaiCryptoSwift13MnemonicErrorO18invalidWordToShiftyA2CmF":{"name":"invalidWordToShift","parent_name":"MnemonicError"},"Enums/MnemonicError.html#/s:16KukaiCryptoSwift13MnemonicErrorO07invalidD0yA2CmF":{"name":"invalidMnemonic","parent_name":"MnemonicError"},"Enums/EntropyGeneratorError.html#/s:16KukaiCryptoSwift21EntropyGeneratorErrorO12invalidInputyAcA0dE0_pcACmF":{"name":"invalidInput(_:)","parent_name":"EntropyGeneratorError"},"Enums/EllipticalCurve.html#/s:16KukaiCryptoSwift15EllipticalCurveO7ed25519yA2CmF":{"name":"ed25519","parent_name":"EllipticalCurve"},"Enums/EllipticalCurve.html#/s:16KukaiCryptoSwift15EllipticalCurveO9secp256k1yA2CmF":{"name":"secp256k1","parent_name":"EllipticalCurve"},"Enums/EllipticalCurve.html#/s:16KukaiCryptoSwift15EllipticalCurveO11fromAddressyACSgSSFZ":{"name":"fromAddress(_:)","parent_name":"EllipticalCurve"},"Enums/EllipticalCurve.html#/s:16KukaiCryptoSwift15EllipticalCurveO13fromBase58KeyyACSgSSFZ":{"name":"fromBase58Key(_:)","parent_name":"EllipticalCurve"},"Enums/ByteHexEncodingErrors.html#/s:16KukaiCryptoSwift21ByteHexEncodingErrorsO09incorrectE5ValueyA2CmF":{"name":"incorrectHexValue","parent_name":"ByteHexEncodingErrors"},"Enums/ByteHexEncodingErrors.html#/s:16KukaiCryptoSwift21ByteHexEncodingErrorsO15incorrectStringyA2CmF":{"name":"incorrectString","parent_name":"ByteHexEncodingErrors"},"Enums/RandomBytesError.html#/s:16KukaiCryptoSwift16RandomBytesErrorO6failedyACs5Int32VcACmF":{"name":"failed(_:)","parent_name":"RandomBytesError"},"Enums/RandomBytesError.html":{"name":"RandomBytesError"},"Enums/ByteHexEncodingErrors.html":{"name":"ByteHexEncodingErrors"},"Enums/EllipticalCurve.html":{"name":"EllipticalCurve","abstract":"<p>Distingush between ed25519 (TZ1&hellip;) and secp256k1 (TZ2&hellip;) curves for creating and using wallet addresses</p>"},"Enums/EntropyGeneratorError.html":{"name":"EntropyGeneratorError","abstract":"<p>Errors relating to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EntropyGenerator.html\">EntropyGenerator</a></code>.</p>"},"Enums/MnemonicError.html":{"name":"MnemonicError"},"Enums/WordList.html":{"name":"WordList"},"Enums/Prefix.html":{"name":"Prefix","abstract":"<p>Prefixes needed to add to hex strings to denote elliptical curves</p>"},"Global%20Variables.html#/s:16KukaiCryptoSwift24MnemonicWordList_ChineseSaySSGvp":{"name":"MnemonicWordList_Chinese","abstract":"<p><a href=\"https://raw.githubusercontent.com/CikeQiu/CKMnemonic/master/CKMnemonic/CKMnemonic/CKMnemonic/Language/Chinese.swift\">https://raw.githubusercontent.com/CikeQiu/CKMnemonic/master/CKMnemonic/CKMnemonic/CKMnemonic/Language/Chinese.swift</a></p>"},"Global%20Variables.html#/s:16KukaiCryptoSwift24MnemonicWordList_EnglishSaySSGvp":{"name":"MnemonicWordList_English","abstract":"<p><a href=\"https://raw.githubusercontent.com/D-Technologies/EthereumKit/master/EthereumKit/Mnemonic/English.swift\">https://raw.githubusercontent.com/D-Technologies/EthereumKit/master/EthereumKit/Mnemonic/English.swift</a></p>"},"Global%20Variables.html":{"name":"Global Variables","abstract":"<p>The following global variables are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}